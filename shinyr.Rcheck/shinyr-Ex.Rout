
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "shinyr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "shinyr-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('shinyr')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("check_and_install")
> ### * check_and_install
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: check_and_install
> ### Title: Check and Install
> ### Aliases: check_and_install
> 
> ### ** Examples
> 
> check_and_install(c('dplyr', 'data.table'))

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

     Package    Status
1      dplyr Installed
2 data.table Installed
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("check_and_install", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:data.table', 'package:dplyr'

> nameEx("confmatrix")
> ### * confmatrix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: confmatrix
> ### Title: Conf Matrix
> ### Aliases: confmatrix
> 
> ### ** Examples
> 
> confmatrix(c(1,1,1,0), c(1,1,0,0))
Confusion Matrix and Statistics

          Reference
Prediction 0 1
         0 1 1
         1 0 2
                                          
               Accuracy : 0.75            
                 95% CI : (0.1941, 0.9937)
    No Information Rate : 0.75            
    P-Value [Acc > NIR] : 0.7383          
                                          
                  Kappa : 0.5             
                                          
 Mcnemar's Test P-Value : 1.0000          
                                          
            Sensitivity : 1.0000          
            Specificity : 0.6667          
         Pos Pred Value : 0.5000          
         Neg Pred Value : 1.0000          
             Prevalence : 0.2500          
         Detection Rate : 0.2500          
   Detection Prevalence : 0.5000          
      Balanced Accuracy : 0.8333          
                                          
       'Positive' Class : 0               
                                          
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("confmatrix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("dataPartition")
> ### * dataPartition
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: dataPartition
> ### Title: Data Partition
> ### Aliases: dataPartition
> 
> ### ** Examples
> 
> dataPartition(iris, 80)
$Test
    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
4            4.6         3.1          1.5         0.2     setosa
5            5.0         3.6          1.4         0.2     setosa
8            5.0         3.4          1.5         0.2     setosa
9            4.4         2.9          1.4         0.2     setosa
11           5.4         3.7          1.5         0.2     setosa
16           5.7         4.4          1.5         0.4     setosa
30           4.7         3.2          1.6         0.2     setosa
36           5.0         3.2          1.2         0.2     setosa
46           4.8         3.0          1.4         0.3     setosa
47           5.1         3.8          1.6         0.2     setosa
49           5.3         3.7          1.5         0.2     setosa
52           6.4         3.2          4.5         1.5 versicolor
54           5.5         2.3          4.0         1.3 versicolor
57           6.3         3.3          4.7         1.6 versicolor
62           5.9         3.0          4.2         1.5 versicolor
67           5.6         3.0          4.5         1.5 versicolor
69           6.2         2.2          4.5         1.5 versicolor
72           6.1         2.8          4.0         1.3 versicolor
80           5.7         2.6          3.5         1.0 versicolor
90           5.5         2.5          4.0         1.3 versicolor
96           5.7         3.0          4.2         1.2 versicolor
97           5.7         2.9          4.2         1.3 versicolor
99           5.1         2.5          3.0         1.1 versicolor
103          7.1         3.0          5.9         2.1  virginica
107          4.9         2.5          4.5         1.7  virginica
109          6.7         2.5          5.8         1.8  virginica
117          6.5         3.0          5.5         1.8  virginica
128          6.1         3.0          4.9         1.8  virginica
137          6.3         3.4          5.6         2.4  virginica
139          6.0         3.0          4.8         1.8  virginica

$Train
    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species
68           5.8         2.7          4.1         1.0 versicolor
129          6.4         2.8          5.6         2.1  virginica
43           4.4         3.2          1.3         0.2     setosa
14           4.3         3.0          1.1         0.1     setosa
51           7.0         3.2          4.7         1.4 versicolor
85           5.4         3.0          4.5         1.5 versicolor
21           5.4         3.4          1.7         0.2     setosa
106          7.6         3.0          6.6         2.1  virginica
74           6.1         2.8          4.7         1.2 versicolor
7            4.6         3.4          1.4         0.3     setosa
73           6.3         2.5          4.9         1.5 versicolor
79           6.0         2.9          4.5         1.5 versicolor
37           5.5         3.5          1.3         0.2     setosa
105          6.5         3.0          5.8         2.2  virginica
110          7.2         3.6          6.1         2.5  virginica
34           5.5         4.2          1.4         0.2     setosa
143          5.8         2.7          5.1         1.9  virginica
126          7.2         3.2          6.0         1.8  virginica
89           5.6         3.0          4.1         1.3 versicolor
33           5.2         4.1          1.5         0.1     setosa
84           6.0         2.7          5.1         1.6 versicolor
70           5.6         2.5          3.9         1.1 versicolor
142          6.9         3.1          5.1         2.3  virginica
42           4.5         2.3          1.3         0.3     setosa
38           4.9         3.6          1.4         0.1     setosa
111          6.5         3.2          5.1         2.0  virginica
20           5.1         3.8          1.5         0.3     setosa
28           5.2         3.5          1.5         0.2     setosa
124          6.3         2.7          4.9         1.8  virginica
44           5.0         3.5          1.6         0.6     setosa
87           6.7         3.1          4.7         1.5 versicolor
149          6.2         3.4          5.4         2.3  virginica
40           5.1         3.4          1.5         0.2     setosa
121          6.9         3.2          5.7         2.3  virginica
25           4.8         3.4          1.9         0.2     setosa
119          7.7         2.6          6.9         2.3  virginica
39           4.4         3.0          1.3         0.2     setosa
146          6.7         3.0          5.2         2.3  virginica
127          6.2         2.8          4.8         1.8  virginica
6            5.4         3.9          1.7         0.4     setosa
24           5.1         3.3          1.7         0.5     setosa
32           5.4         3.4          1.5         0.4     setosa
147          6.3         2.5          5.0         1.9  virginica
2            4.9         3.0          1.4         0.2     setosa
45           5.1         3.8          1.9         0.4     setosa
18           5.1         3.5          1.4         0.3     setosa
22           5.1         3.7          1.5         0.4     setosa
78           6.7         3.0          5.0         1.7 versicolor
102          5.8         2.7          5.1         1.9  virginica
65           5.6         2.9          3.6         1.3 versicolor
115          5.8         2.8          5.1         2.4  virginica
120          6.0         2.2          5.0         1.5  virginica
100          5.7         2.8          4.1         1.3 versicolor
75           6.4         2.9          4.3         1.3 versicolor
81           5.5         2.4          3.8         1.1 versicolor
13           4.8         3.0          1.4         0.1     setosa
118          7.7         3.8          6.7         2.2  virginica
132          7.9         3.8          6.4         2.0  virginica
48           4.6         3.2          1.4         0.2     setosa
93           5.8         2.6          4.0         1.2 versicolor
23           4.6         3.6          1.0         0.2     setosa
130          7.2         3.0          5.8         1.6  virginica
29           5.2         3.4          1.4         0.2     setosa
95           5.6         2.7          4.2         1.3 versicolor
104          6.3         2.9          5.6         1.8  virginica
123          7.7         2.8          6.7         2.0  virginica
92           6.1         3.0          4.6         1.4 versicolor
131          7.4         2.8          6.1         1.9  virginica
134          6.3         2.8          5.1         1.5  virginica
144          6.8         3.2          5.9         2.3  virginica
31           4.8         3.1          1.6         0.2     setosa
17           5.4         3.9          1.3         0.4     setosa
140          6.9         3.1          5.4         2.1  virginica
91           5.5         2.6          4.4         1.2 versicolor
64           6.1         2.9          4.7         1.4 versicolor
60           5.2         2.7          3.9         1.4 versicolor
113          6.8         3.0          5.5         2.1  virginica
135          6.1         2.6          5.6         1.4  virginica
10           4.9         3.1          1.5         0.1     setosa
1            5.1         3.5          1.4         0.2     setosa
148          6.5         3.0          5.2         2.0  virginica
59           6.6         2.9          4.6         1.3 versicolor
26           5.0         3.0          1.6         0.2     setosa
15           5.8         4.0          1.2         0.2     setosa
58           4.9         2.4          3.3         1.0 versicolor
88           6.3         2.3          4.4         1.3 versicolor
136          7.7         3.0          6.1         2.3  virginica
112          6.4         2.7          5.3         1.9  virginica
77           6.8         2.8          4.8         1.4 versicolor
53           6.9         3.1          4.9         1.5 versicolor
12           4.8         3.4          1.6         0.2     setosa
114          5.7         2.5          5.0         2.0  virginica
76           6.6         3.0          4.4         1.4 versicolor
61           5.0         2.0          3.5         1.0 versicolor
145          6.7         3.3          5.7         2.5  virginica
86           6.0         3.4          4.5         1.6 versicolor
94           5.0         2.3          3.3         1.0 versicolor
83           5.8         2.7          3.9         1.2 versicolor
19           5.7         3.8          1.7         0.3     setosa
150          5.9         3.0          5.1         1.8  virginica
35           4.9         3.1          1.5         0.2     setosa
98           6.2         2.9          4.3         1.3 versicolor
71           5.9         3.2          4.8         1.8 versicolor
101          6.3         3.3          6.0         2.5  virginica
108          7.3         2.9          6.3         1.8  virginica
55           6.5         2.8          4.6         1.5 versicolor
125          6.7         3.3          5.7         2.1  virginica
56           5.7         2.8          4.5         1.3 versicolor
41           5.0         3.5          1.3         0.3     setosa
138          6.4         3.1          5.5         1.8  virginica
3            4.7         3.2          1.3         0.2     setosa
82           5.5         2.4          3.7         1.0 versicolor
50           5.0         3.3          1.4         0.2     setosa
141          6.7         3.1          5.6         2.4  virginica
133          6.4         2.8          5.6         2.2  virginica
27           5.0         3.4          1.6         0.4     setosa
63           6.0         2.2          4.0         1.0 versicolor
122          5.6         2.8          4.9         2.0  virginica
116          6.4         3.2          5.3         2.3  virginica
66           6.7         3.1          4.4         1.4 versicolor

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("dataPartition", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("detectClass")
> ### * detectClass
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: detectClass
> ### Title: Detect Class
> ### Aliases: detectClass
> 
> ### ** Examples
> 
> detectClass(c(1,2,3))
[1] "numeric"
> detectClass(c("a","b"))
[1] "character"
> detectClass(iris$Species)
[1] "factor"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("detectClass", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("excludeThese")
> ### * excludeThese
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: excludeThese
> ### Title: Exclude These
> ### Aliases: excludeThese
> 
> ### ** Examples
> 
> excludeThese(1:10, 1)
[1]  2  3  4  5  6  7  8  9 10
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("excludeThese", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getCoefficients")
> ### * getCoefficients
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getCoefficients
> ### Title: Get Coefficients
> ### Aliases: getCoefficients
> 
> ### ** Examples
> 
>  model <- lm(Sepal.Length ~ ., iris) # A linear regression model
>  getCoefficients(model)
                                Col   Estimate Std..Error   t.value
(Intercept)             (Intercept)  2.1712663 0.27979415  7.760227
Sepal.Width             Sepal.Width  0.4958889 0.08606992  5.761466
Petal.Length           Petal.Length  0.8292439 0.06852765 12.100867
Petal.Width             Petal.Width -0.3151552 0.15119575 -2.084418
Speciesversicolor Speciesversicolor -0.7235620 0.24016894 -3.012721
Speciesvirginica   Speciesvirginica -1.0234978 0.33372630 -3.066878
                      Pr...t..
(Intercept)       1.429502e-12
Sepal.Width       4.867516e-08
Petal.Length      1.073592e-23
Petal.Width       3.888826e-02
Speciesversicolor 3.059634e-03
Speciesvirginica  2.584344e-03
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getCoefficients", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getDataInsight")
> ### * getDataInsight
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getDataInsight
> ### Title: get Data Insights
> ### Aliases: getDataInsight
> 
> ### ** Examples
> 
> getDataInsight(mtcars)
$Rows
[1] 32

$Columns
[1] 11

$Types
      Column Class     Missing Max     Min     Mean     Median  SD      
 [1,] "mpg"  "numeric" "0"     "33.9"  "10.4"  "20.09"  "19.2"  "6.03"  
 [2,] "cyl"  "numeric" "0"     "8"     "4"     "6.19"   "6"     "1.79"  
 [3,] "disp" "numeric" "0"     "472"   "71.1"  "230.72" "196.3" "123.94"
 [4,] "hp"   "numeric" "0"     "335"   "52"    "146.69" "123"   "68.56" 
 [5,] "drat" "numeric" "0"     "4.93"  "2.76"  "3.6"    "3.7"   "0.53"  
 [6,] "wt"   "numeric" "0"     "5.424" "1.513" "3.22"   "3.33"  "0.98"  
 [7,] "qsec" "numeric" "0"     "22.9"  "14.5"  "17.85"  "17.71" "1.79"  
 [8,] "vs"   "numeric" "0"     "1"     "0"     "0.44"   "0"     "0.5"   
 [9,] "am"   "numeric" "0"     "1"     "0"     "0.41"   "0"     "0.5"   
[10,] "gear" "numeric" "0"     "5"     "3"     "3.69"   "4"     "0.74"  
[11,] "carb" "numeric" "0"     "8"     "1"     "2.81"   "2"     "1.62"  
      Variance 
 [1,] "36.32"  
 [2,] "3.19"   
 [3,] "15360.8"
 [4,] "4700.87"
 [5,] "0.29"   
 [6,] "0.96"   
 [7,] "3.19"   
 [8,] "0.25"   
 [9,] "0.25"   
[10,] "0.54"   
[11,] "2.61"   
      Unique_items                                                                                                                                                      
 [1,] "21,22.8,21.4,18.7,18.1,14.3,24.4,19.2,17.8,16.4,17.3,15.2,10.4,14.7,32.4,30.4,33.9,21.5,15.5,13.3,27.3,26,15.8,19.7,15"                                          
 [2,] "6,4,8"                                                                                                                                                           
 [3,] "160,108,258,360,225,146.7,140.8,167.6,275.8,472,460,440,78.7,75.7,71.1,120.1,318,304,350,400,79,120.3,95.1,351,145,301,121"                                      
 [4,] "110,93,175,105,245,62,95,123,180,205,215,230,66,52,65,97,150,91,113,264,335,109"                                                                                 
 [5,] "3.9,3.85,3.08,3.15,2.76,3.21,3.69,3.92,3.07,2.93,3,3.23,4.08,4.93,4.22,3.7,3.73,4.43,3.77,3.62,3.54,4.11"                                                        
 [6,] "2.62,2.875,2.32,3.215,3.44,3.46,3.57,3.19,3.15,4.07,3.73,3.78,5.25,5.424,5.345,2.2,1.615,1.835,2.465,3.52,3.435,3.84,3.845,1.935,2.14,1.513,3.17,2.77,2.78"      
 [7,] "16.46,17.02,18.61,19.44,20.22,15.84,20,22.9,18.3,18.9,17.4,17.6,18,17.98,17.82,17.42,19.47,18.52,19.9,20.01,16.87,17.3,15.41,17.05,16.7,16.9,14.5,15.5,14.6,18.6"
 [8,] "0,1"                                                                                                                                                             
 [9,] "1,0"                                                                                                                                                             
[10,] "4,3,5"                                                                                                                                                           
[11,] "4,1,2,3,6,8"                                                                                                                                                     

$cor_matrix
            mpg        cyl       disp         hp        drat         wt
mpg   1.0000000 -0.8521620 -0.8475514 -0.7761684  0.68117191 -0.8676594
cyl  -0.8521620  1.0000000  0.9020329  0.8324475 -0.69993811  0.7824958
disp -0.8475514  0.9020329  1.0000000  0.7909486 -0.71021393  0.8879799
hp   -0.7761684  0.8324475  0.7909486  1.0000000 -0.44875912  0.6587479
drat  0.6811719 -0.6999381 -0.7102139 -0.4487591  1.00000000 -0.7124406
wt   -0.8676594  0.7824958  0.8879799  0.6587479 -0.71244065  1.0000000
qsec  0.4186840 -0.5912421 -0.4336979 -0.7082234  0.09120476 -0.1747159
vs    0.6640389 -0.8108118 -0.7104159 -0.7230967  0.44027846 -0.5549157
am    0.5998324 -0.5226070 -0.5912270 -0.2432043  0.71271113 -0.6924953
gear  0.4802848 -0.4926866 -0.5555692 -0.1257043  0.69961013 -0.5832870
carb -0.5509251  0.5269883  0.3949769  0.7498125 -0.09078980  0.4276059
            qsec         vs          am       gear        carb
mpg   0.41868403  0.6640389  0.59983243  0.4802848 -0.55092507
cyl  -0.59124207 -0.8108118 -0.52260705 -0.4926866  0.52698829
disp -0.43369788 -0.7104159 -0.59122704 -0.5555692  0.39497686
hp   -0.70822339 -0.7230967 -0.24320426 -0.1257043  0.74981247
drat  0.09120476  0.4402785  0.71271113  0.6996101 -0.09078980
wt   -0.17471588 -0.5549157 -0.69249526 -0.5832870  0.42760594
qsec  1.00000000  0.7445354 -0.22986086 -0.2126822 -0.65624923
vs    0.74453544  1.0000000  0.16834512  0.2060233 -0.56960714
am   -0.22986086  0.1683451  1.00000000  0.7940588  0.05753435
gear -0.21268223  0.2060233  0.79405876  1.0000000  0.27407284
carb -0.65624923 -0.5696071  0.05753435  0.2740728  1.00000000

> getDataInsight(iris)
$Rows
[1] 150

$Columns
[1] 5

$Types
     Column         Class     Missing Max   Min   Mean   Median SD     Variance
[1,] "Sepal.Length" "numeric" "0"     "7.9" "4.3" "5.84" "5.8"  "0.83" "0.69"  
[2,] "Sepal.Width"  "numeric" "0"     "4.4" "2"   "3.06" "3"    "0.44" "0.19"  
[3,] "Petal.Length" "numeric" "0"     "6.9" "1"   "3.76" "4.35" "1.77" "3.12"  
[4,] "Petal.Width"  "numeric" "0"     "2.5" "0.1" "1.2"  "1.3"  "0.76" "0.58"  
[5,] "Species"      "factor"  "0"     NA    NA    NA     NA     NA     NA      
     Unique_items                                                                                                                                                       
[1,] "5.1,4.9,4.7,4.6,5,5.4,4.4,4.8,4.3,5.8,5.7,5.2,5.5,4.5,5.3,7,6.4,6.9,6.5,6.3,6.6,5.9,6,6.1,5.6,6.7,6.2,6.8,7.1,7.6,7.3,7.2,7.7,7.4,7.9"                            
[2,] "3.5,3,3.2,3.1,3.6,3.9,3.4,2.9,3.7,4,4.4,3.8,3.3,4.1,4.2,2.3,2.8,2.4,2.7,2,2.2,2.5,2.6"                                                                            
[3,] "1.4,1.3,1.5,1.7,1.6,1.1,1.2,1,1.9,4.7,4.5,4.9,4,4.6,3.3,3.9,3.5,4.2,3.6,4.4,4.1,4.8,4.3,5,3.8,3.7,5.1,3,6,5.9,5.6,5.8,6.6,6.3,6.1,5.3,5.5,6.7,6.9,5.7,6.4,5.4,5.2"
[4,] "0.2,0.4,0.3,0.1,0.5,0.6,1.4,1.5,1.3,1.6,1,1.1,1.8,1.2,1.7,2.5,1.9,2.1,2.2,2,2.4,2.3"                                                                              
[5,] "setosa,versicolor,virginica"                                                                                                                                      

$cor_matrix
             Sepal.Length Sepal.Width Petal.Length Petal.Width
Sepal.Length    1.0000000  -0.1175698    0.8717538   0.8179411
Sepal.Width    -0.1175698   1.0000000   -0.4284401  -0.3661259
Petal.Length    0.8717538  -0.4284401    1.0000000   0.9628654
Petal.Width     0.8179411  -0.3661259    0.9628654   1.0000000

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getDataInsight", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getFeqTable")
> ### * getFeqTable
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getFeqTable
> ### Title: Get Freq Table
> ### Aliases: getFeqTable
> 
> ### ** Examples
> 
> getFeqTable("shinyr is Incredible!")
                 word freq
incredible incredible    1
shinyr         shinyr    1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getFeqTable", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getLibraryReport")
> ### * getLibraryReport
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getLibraryReport
> ### Title: Get Library Report
> ### Aliases: getLibraryReport
> 
> ### ** Examples
> 
> check_and_install(c('dplyr', 'data.table'))

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union


Attaching package: 'data.table'

The following objects are masked from 'package:dplyr':

    between, first, last

     Package    Status
1      dplyr Installed
2 data.table Installed
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getLibraryReport", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:data.table', 'package:dplyr'

> nameEx("getMostRepeatedValue")
> ### * getMostRepeatedValue
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getMostRepeatedValue
> ### Title: Get Most Repeated Value
> ### Aliases: getMostRepeatedValue
> 
> ### ** Examples
> 
> getMostRepeatedValue(c(1,2,3,3,3,2))
[1] 3
Levels: 1 2 3
> getMostRepeatedValue(c("R", "R", "Python", "Python", "R"))
[1] R
Levels: Python R
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getMostRepeatedValue", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getType")
> ### * getType
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getType
> ### Title: Get Type
> ### Aliases: getType
> 
> ### ** Examples
> 
> getType(iris$Species)
[1] "character"
> getType(as.factor(c(1,0,1,1,0,NA,1, NULL)))
[1] "character"
> getType(as.factor(c(1, NULL,0,1,1,0,1,'a')))
[1] "character"
> getType(c(1,2,3,4, NA))
[1] "numeric"
> getType(letters[1:4])
[1] "character"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getType", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getWordCloud")
> ### * getWordCloud
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getWordCloud
> ### Title: Get Word Cloud
> ### Aliases: getWordCloud
> 
> ### ** Examples
> 
> x <- getFeqTable("Hello! R is Great")
> getWordCloud(x)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getWordCloud", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getcharacterCols")
> ### * getcharacterCols
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getcharacterCols
> ### Title: Get Character Cols
> ### Aliases: getcharacterCols
> 
> ### ** Examples
> 
> getcharacterCols(iris)
character(0)
> getcharacterCols(mtcars)
character(0)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getcharacterCols", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("getnumericCols")
> ### * getnumericCols
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: getnumericCols
> ### Title: Get Numeric Cols
> ### Aliases: getnumericCols
> 
> ### ** Examples
> 
> getnumericCols(iris)
[1] "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width" 
> getnumericCols(mtcars)
 [1] "mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear"
[11] "carb"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("getnumericCols", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("groupByandSumarize")
> ### * groupByandSumarize
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: groupByandSumarize
> ### Title: Group By And Summarize
> ### Aliases: groupByandSumarize
> 
> ### ** Examples
> 
> groupByandSumarize(mtcars, grp_col = c("am"), summarise_col = "hp", FUN = "mean")
  am mean_of_hp_by_am
1  1         126.8462
2  0         160.2632
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("groupByandSumarize", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("imputeMyData")
> ### * imputeMyData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: imputeMyData
> ### Title: Impute My Data
> ### Aliases: imputeMyData
> 
> ### ** Examples
> 
> x <- head(iris)
> x$Sepal.Length[1] <- NA
> imputeMyData(x, "Sepal.Length", "mean")
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1         4.92         3.5          1.4         0.2  setosa
2         4.90         3.0          1.4         0.2  setosa
3         4.70         3.2          1.3         0.2  setosa
4         4.60         3.1          1.5         0.2  setosa
5         5.00         3.6          1.4         0.2  setosa
6         5.40         3.9          1.7         0.4  setosa
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("imputeMyData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("make_var")
> ### * make_var
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: make_var
> ### Title: Make Var
> ### Aliases: make_var
> 
> ### ** Examples
> 
> make_var("", "Jay", "")
Jay
> make_var("", "Incredible_India", "")
Incredible_India
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("make_var", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("missing_count")
> ### * missing_count
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: missing_count
> ### Title: Missing Count
> ### Aliases: missing_count
> 
> ### ** Examples
> 
> missing_count(c(1,2,3))
[1] 0
> missing_count(c(NA, 1, NA, "NULL", ""))
[1] 4
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("missing_count", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("multinomial")
> ### * multinomial
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: multinomial
> ### Title: Multinomial
> ### Aliases: multinomial
> 
> ### ** Examples
> 
> multinomial( Species ~ .,  iris)
# weights:  18 (10 variable)
initial  value 164.791843 
iter  10 value 16.177348
iter  20 value 7.111438
iter  30 value 6.182999
iter  40 value 5.984028
iter  50 value 5.961278
iter  60 value 5.954900
iter  70 value 5.951851
iter  80 value 5.950343
iter  90 value 5.949904
iter 100 value 5.949867
final  value 5.949867 
stopped after 100 iterations
Call:
nnet::multinom(formula = eqn, data = df)

Coefficients:
           (Intercept) Sepal.Length Sepal.Width Petal.Length Petal.Width
versicolor    18.69037    -5.458424   -8.707401     14.24477   -3.097684
virginica    -23.83628    -7.923634  -15.370769     23.65978   15.135301

Residual Deviance: 11.89973 
AIC: 31.89973 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("multinomial", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("randomForestModel")
> ### * randomForestModel
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: randomForestModel
> ### Title: Random Forest Model
> ### Aliases: randomForestModel
> 
> ### ** Examples
> 
> randomForestModel( Species ~ .,  iris)

Call:
 randomForest(formula = eqn, data = df, importance = TRUE) 
               Type of random forest: classification
                     Number of trees: 500
No. of variables tried at each split: 2

        OOB estimate of  error rate: 5.33%
Confusion matrix:
           setosa versicolor virginica class.error
setosa         50          0         0        0.00
versicolor      0         47         3        0.06
virginica       0          5        45        0.10
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("randomForestModel", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("regressionModelMetrics")
> ### * regressionModelMetrics
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: regressionModelMetrics
> ### Title: Regression Model Metrics
> ### Aliases: regressionModelMetrics
> 
> ### ** Examples
> 
> ## Not run: 
> ##D mod <- lm(formula = wt ~ ., data = mtcars)
> ##D predictions <- predict(mod, mtcars[,-6])
> ##D actials <- mtcars[,6]
> ##D regressionModelMetrics(actuals = actials,
> ##D predictions = predictions, model = mod)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("regressionModelMetrics", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("shineMe")
> ### * shineMe
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: shineMe
> ### Title: shineMe
> ### Aliases: shineMe
> 
> ### ** Examples
> 
> ## Not run: 
> ##D shineMe()
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("shineMe", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("splitAndGet")
> ### * splitAndGet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: splitAndGet
> ### Title: Split And Get
> ### Aliases: splitAndGet
> 
> ### ** Examples
> 
> splitAndGet("R programming is awesome!")
[[1]]
[1] "R"           "programming" "is"          "awesome!"   

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("splitAndGet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("valid_sets")
> ### * valid_sets
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: valid_sets
> ### Title: Valid Sets
> ### Aliases: valid_sets
> 
> ### ** Examples
> 
> valid_sets()
     Package                                   LibPath             Item
5   datasets C:/Users/jjjn/Documents/R/R-3.6.1/library              CO2
6   datasets C:/Users/jjjn/Documents/R/R-3.6.1/library      ChickWeight
7   datasets C:/Users/jjjn/Documents/R/R-3.6.1/library            DNase
13  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library         Indometh
17  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library LifeCycleSavings
18  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library         Loblolly
20  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library           Orange
21  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library    OrchardSprays
23  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library        Puromycin
25  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library           Theoph
27  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library      ToothGrowth
32  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library        USArrests
33  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library   USJudgeRatings
41  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library       airquality
42  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library         anscombe
43  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library           attenu
44  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library         attitude
53  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library            esoph
59  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library           freeny
62  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library           infert
63  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library             iris
68  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library          longley
71  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library           morley
72  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library           mtcars
75  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library              npk
80  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library           quakes
81  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library            randu
83  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library             rock
84  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library            sleep
87  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library        stackloss
98  datasets C:/Users/jjjn/Documents/R/R-3.6.1/library            swiss
100 datasets C:/Users/jjjn/Documents/R/R-3.6.1/library            trees
103 datasets C:/Users/jjjn/Documents/R/R-3.6.1/library       warpbreaks
                                                          Title
5                         Carbon Dioxide Uptake in Grass Plants
6                Weight versus age of chicks on different diets
7                                          Elisa assay of DNase
13                             Pharmacokinetics of Indomethacin
17                         Intercountry Life-Cycle Savings Data
18                                Growth of Loblolly pine trees
20                                       Growth of Orange Trees
21                                    Potency of Orchard Sprays
23                   Reaction Velocity of an Enzymatic Reaction
25                             Pharmacokinetics of Theophylline
27       The Effect of Vitamin C on Tooth Growth in Guinea Pigs
32                              Violent Crime Rates by US State
33    Lawyers' Ratings of State Judges in the US Superior Court
41                            New York Air Quality Measurements
42  Anscombe's Quartet of 'Identical' Simple Linear Regressions
43                            The Joyner-Boore Attenuation Data
44                           The Chatterjee-Price Attitude Data
53                    Smoking, Alcohol and (O)esophageal Cancer
59                                        Freeny's Revenue Data
62           Infertility after Spontaneous and Induced Abortion
63                                   Edgar Anderson's Iris Data
68                           Longley's Economic Regression Data
71                                Michelson Speed of Light Data
72                                   Motor Trend Car Road Tests
75                       Classical N, P, K Factorial Experiment
80                            Locations of Earthquakes off Fiji
81             Random Numbers from Congruential Generator RANDU
83                       Measurements on Petroleum Rock Samples
84                                         Student's Sleep Data
87                             Brownlee's Stack Loss Plant Data
98     Swiss Fertility and Socioeconomic Indicators (1888) Data
100          Diameter, Height and Volume for Black Cherry Trees
103                 The Number of Breaks in Yarn during Weaving
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("valid_sets", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  9.69 2.03 12.87 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
